/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/processes/{process_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show */
        get: operations["show_api_processes__process_id__get"];
        put?: never;
        post?: never;
        /** Delete */
        delete: operations["delete_api_processes__process_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/processes/{workflow_key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** New Process */
        post: operations["new_process_api_processes__workflow_key__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/processes/{process_id}/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Resume Process Endpoint */
        put: operations["resume_process_endpoint_api_processes__process_id__resume_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/processes/{process_id}/callback/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Continue Awaiting Process Endpoint */
        post: operations["continue_awaiting_process_endpoint_api_processes__process_id__callback__token__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/processes/resume-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Resume All Processess Endpoint
         * @description Retry all task processes in status Failed, Waiting, API Unavailable or Inconsistent Data.
         *
         *     The retry is started in the background, returning status 200 and number of processes in message.
         *     When it is already running, refuse and return status 409 instead.
         */
        put: operations["resume_all_processess_endpoint_api_processes_resume_all_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/processes/{process_id}/abort": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Abort Process Endpoint */
        put: operations["abort_process_endpoint_api_processes__process_id__abort_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/processes/status-counts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Status Counts
         * @description Retrieve status counts for processes and tasks.
         */
        get: operations["status_counts_api_processes_status_counts_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/processes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Processes Filterable */
        get: operations["processes_filterable_api_processes__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch */
        get: operations["fetch_api_products__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/{product_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Product By Id */
        get: operations["product_by_id_api_products__product_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subscriptions/domain-model/{subscription_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Subscription Details By Id With Domain Model */
        get: operations["subscription_details_by_id_with_domain_model_api_subscriptions_domain_model__subscription_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subscriptions/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Subscriptions Search
         * @description Get subscriptions filtered based on a search query string.
         *
         *     Args:
         *         response: Fastapi Response object
         *         query: The search query
         *         range: Range
         *         sort: Sort
         *
         *     Returns:
         *         List of subscriptions
         */
        get: operations["subscriptions_search_api_subscriptions_search_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subscriptions/workflows/{subscription_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Subscription Workflows By Id
         * @deprecated
         * @description This endpoint is deprecated and will be removed in a future release. Please use the GraphQL query
         */
        get: operations["subscription_workflows_by_id_api_subscriptions_workflows__subscription_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subscriptions/{subscription_id}/set_in_sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Subscription Set In Sync */
        put: operations["subscription_set_in_sync_api_subscriptions__subscription_id__set_in_sync_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subscription_customer_descriptions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Subscription Customer Description Endpoint */
        put: operations["update_subscription_customer_description_endpoint_api_subscription_customer_descriptions__put"];
        /** Save Subscription Customer Description Endpoint */
        post: operations["save_subscription_customer_description_endpoint_api_subscription_customer_descriptions__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subscription_customer_descriptions/{_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Subscription Customer Descriptions */
        get: operations["get_subscription_customer_descriptions_api_subscription_customer_descriptions___id__get"];
        put?: never;
        post?: never;
        /** Delete Subscription Customer Descriptions */
        delete: operations["delete_subscription_customer_descriptions_api_subscription_customer_descriptions___id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subscription_customer_descriptions/customer/{customer_id}/subscription/{subscription_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Subscription Customer Description By Customer Subscription */
        get: operations["get_subscription_customer_description_by_customer_subscription_api_subscription_customer_descriptions_customer__customer_id__subscription__subscription_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Log Error */
        post: operations["log_error_api_user_error_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/log/{user_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Log User Info
         * @description Log frontend messages that are related to user actions.
         *
         *     When the frontend finalizes the setup of a login session it will do a HTTP POST to this endpoint. The frontend
         *     will also post to this endpoint when it ends a user session.
         *
         *     Args:
         *         user_name: the username (email) of the user involved
         *         message: A log message.
         *
         *     Returns:
         *         {}
         */
        post: operations["log_user_info_api_user_log__user_name__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/settings/cache/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Clear Cache */
        delete: operations["clear_cache_api_settings_cache__name__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/settings/cache-names": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Cache Names */
        get: operations["get_cache_names_api_settings_cache_names_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/settings/search-index/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset Search Index */
        post: operations["reset_search_index_api_settings_search_index_reset_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/settings/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Global Status
         * @description Retrieve the global status object.
         *
         *     Returns:
         *         The global status of the engine
         */
        get: operations["get_global_status_api_settings_status_get"];
        /**
         * Set Global Status
         * @description Update the global status of the engine to a new state.
         *
         *     Args:
         *         body: The GlobalStatus object
         *         user: The OIDCUser model
         *
         *     Returns:
         *         The updated global status object
         */
        put: operations["set_global_status_api_settings_status_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/settings/worker-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Worker Status
         * @description Return data on job workers and queues.
         *
         *     Returns:
         *     - The number of queued jobs
         *     - The number of workers
         *     - The number of running jobs
         *     - The number of successful and unsuccessful jobs
         */
        get: operations["get_worker_status_api_settings_worker_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Health */
        get: operations["get_health_api_health__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search Subscriptions */
        post: operations["search_subscriptions_api_search_subscriptions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/workflows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search Workflows */
        post: operations["search_workflows_api_search_workflows_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search Products */
        post: operations["search_products_api_search_products_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/processes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search Processes */
        post: operations["search_processes_api_search_processes_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/hierarchy/paths": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Explore Hierarchy Paths */
        get: operations["explore_hierarchy_paths_api_search_hierarchy_paths_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/hierarchy/schema": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Hierarchy Schema */
        get: operations["get_hierarchy_schema_api_search_hierarchy_schema_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/graphql": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Handle Http Get */
        get: operations["handle_http_get_api_graphql_get"];
        put?: never;
        /** Handle Http Post */
        post: operations["handle_http_post_api_graphql_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * ActionType
         * @description Defines the explicit, safe actions the agent can request.
         * @enum {string}
         */
        ActionType: "select";
        /**
         * Assignee
         * @enum {string}
         */
        Assignee: "NOC" | "SYSTEM" | "CHANGES" | "KLANTSUPPORT";
        /** ConnectionSchema[ProcessSearchSchema] */
        ConnectionSchema_ProcessSearchSchema_: {
            /** Page */
            page: components["schemas"]["ProcessSearchSchema"][];
            pageInfo: components["schemas"]["PageInfoSchema"];
        };
        /** ConnectionSchema[ProductSearchSchema] */
        ConnectionSchema_ProductSearchSchema_: {
            /** Page */
            page: components["schemas"]["ProductSearchSchema"][];
            pageInfo: components["schemas"]["PageInfoSchema"];
        };
        /** ConnectionSchema[SubscriptionSearchResult] */
        ConnectionSchema_SubscriptionSearchResult_: {
            /** Page */
            page: components["schemas"]["SubscriptionSearchResult"][];
            pageInfo: components["schemas"]["PageInfoSchema"];
        };
        /** ConnectionSchema[WorkflowSearchSchema] */
        ConnectionSchema_WorkflowSearchSchema_: {
            /** Page */
            page: components["schemas"]["WorkflowSearchSchema"][];
            pageInfo: components["schemas"]["PageInfoSchema"];
        };
        /** DateBetweenFilter */
        DateBetweenFilter: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            op: "between";
            value: components["schemas"]["DateRange"];
        };
        /** DateEqFilter */
        DateEqFilter: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            op: "eq";
            /** Value */
            value: string;
        };
        /** DateGtFilter */
        DateGtFilter: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            op: "gt";
            /** Value */
            value: string;
        };
        /** DateGteFilter */
        DateGteFilter: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            op: "gte";
            /** Value */
            value: string;
        };
        /** DateIsNotNullFilter */
        DateIsNotNullFilter: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            op: "is_not_null";
        };
        /** DateIsNullFilter */
        DateIsNullFilter: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            op: "is_null";
        };
        /** DateLtFilter */
        DateLtFilter: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            op: "lt";
            /** Value */
            value: string;
        };
        /** DateLteFilter */
        DateLteFilter: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            op: "lte";
            /** Value */
            value: string;
        };
        /** DateNeqFilter */
        DateNeqFilter: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            op: "neq";
            /** Value */
            value: string;
        };
        /** DateRange */
        DateRange: {
            /** From */
            from: string;
            /** To */
            to: string;
        };
        /** EngineSettingsBaseSchema */
        EngineSettingsBaseSchema: {
            /** Global Lock */
            global_lock: boolean;
        };
        /** EngineSettingsSchema */
        EngineSettingsSchema: {
            /** Global Lock */
            global_lock: boolean;
            global_status?: components["schemas"]["GlobalStatusEnum"] | null;
            /** Running Processes */
            running_processes: number;
        };
        /**
         * EntityKind
         * @enum {string}
         */
        EntityKind: "SUBSCRIPTION" | "PRODUCT" | "WORKFLOW" | "PROCESS";
        /** FixedInputSchema */
        FixedInputSchema: {
            /**
             * Fixed Input Id
             * Format: uuid
             */
            fixed_input_id: string;
            /** Name */
            name: string;
            /** Value */
            value: string;
            /**
             * Product Id
             * Format: uuid
             */
            product_id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /**
         * GlobalStatusEnum
         * @enum {string}
         */
        GlobalStatusEnum: "RUNNING" | "PAUSED" | "PAUSING";
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** HierarchyResponse */
        HierarchyResponse: {
            /**
             * Current Path
             * @description The current path being explored
             */
            current_path: string | null;
            /**
             * Available Paths
             * @description Available child paths from current position
             */
            available_paths: components["schemas"]["PathNode"][];
        };
        /**
         * Highlight
         * @description Contains the text and the indices of the matched term.
         */
        Highlight: {
            /** Text */
            text: string;
            /** Indices */
            indices: [
                number,
                number
            ][];
        };
        /**
         * LtreeAncestorFilter
         * @description Filter for checking if a path is an ancestor of another.
         */
        LtreeAncestorFilter: {
            /**
             * Op
             * @default is_ancestor
             * @constant
             */
            op: "is_ancestor";
            /**
             * Value
             * @description The ltree path or lquery pattern to compare against.
             */
            value: string;
        };
        /**
         * LtreeDescendantFilter
         * @description Filter for checking if a path is a descendant of another.
         */
        LtreeDescendantFilter: {
            /**
             * Op
             * @default is_descendant
             * @constant
             */
            op: "is_descendant";
            /**
             * Value
             * @description The ltree path or lquery pattern to compare against.
             */
            value: string;
        };
        /**
         * LtreeMatchesFilter
         * @description Filter for matching a path against an lquery wildcard pattern.
         */
        LtreeMatchesFilter: {
            /**
             * Op
             * @default matches_lquery
             * @constant
             */
            op: "matches_lquery";
            /**
             * Value
             * @description The ltree path or lquery pattern to compare against.
             */
            value: string;
        };
        /** PageInfoSchema */
        PageInfoSchema: {
            /**
             * Totalitems
             * @default 0
             */
            totalItems: number;
            /**
             * Startcursor
             * @default 0
             */
            startCursor: number;
            /**
             * Haspreviouspage
             * @default false
             */
            hasPreviousPage: boolean;
            /**
             * Hasnextpage
             * @default false
             */
            hasNextPage: boolean;
            /**
             * Endcursor
             * @default 0
             */
            endCursor: number;
            /** Sortfields */
            sortFields?: string[];
            /** Filterfields */
            filterFields?: string[];
        };
        /** PathFilter */
        PathFilter: {
            /**
             * Path
             * @description The ltree path of the field to filter on, e.g., 'subscription.customer_id'.
             */
            path: string;
            /**
             * Condition
             * @description The filter condition to apply.
             */
            condition: (components["schemas"]["DateEqFilter"] | components["schemas"]["DateNeqFilter"] | components["schemas"]["DateLtFilter"] | components["schemas"]["DateLteFilter"] | components["schemas"]["DateGtFilter"] | components["schemas"]["DateGteFilter"] | components["schemas"]["DateBetweenFilter"] | components["schemas"]["DateIsNullFilter"] | components["schemas"]["DateIsNotNullFilter"]) | (components["schemas"]["StrEqFilter"] | components["schemas"]["StrNeFilter"]) | components["schemas"]["LtreeDescendantFilter"] | components["schemas"]["LtreeAncestorFilter"] | components["schemas"]["LtreeMatchesFilter"];
        };
        /** PathNode */
        PathNode: {
            /**
             * Path
             * @description The full path to this node
             */
            path: string;
            /**
             * Segment
             * @description Just this segment of the path
             */
            segment: string;
            /**
             * Has Children
             * @description Whether this path has child paths
             */
            has_children: boolean;
            /**
             * Is Leaf
             * @description Whether this is a leaf node (has values)
             */
            is_leaf: boolean;
            /**
             * Example Values
             * @description Example values at this path
             */
            example_values?: string[] | null;
        };
        /** ProcessIdSchema */
        ProcessIdSchema: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
        };
        /** ProcessResumeAllSchema */
        ProcessResumeAllSchema: {
            /** Count */
            count: number;
        };
        /** ProcessSchema */
        ProcessSchema: {
            /**
             * Process Id
             * Format: uuid
             */
            process_id: string;
            /**
             * Workflow Id
             * Format: uuid
             */
            workflow_id: string;
            /** Workflow Name */
            workflow_name: string;
            /** Is Task */
            is_task: boolean;
            /** Created By */
            created_by?: string | null;
            /** Failed Reason */
            failed_reason?: string | null;
            /**
             * Started At
             * Format: date-time
             */
            started_at: string;
            last_status: components["schemas"]["ProcessStatus"];
            /** Last Step */
            last_step?: string | null;
            assignee: components["schemas"]["Assignee"];
            /**
             * Last Modified At
             * Format: date-time
             */
            last_modified_at: string;
            /** Traceback */
            traceback?: string | null;
            /** Product Id */
            product_id?: string | null;
            /** Customer Id */
            customer_id?: string | null;
            workflow_target?: components["schemas"]["Target"] | null;
            /** Subscriptions */
            subscriptions: components["schemas"]["SubscriptionSchema"][];
            /** Current State */
            current_state?: {
                [key: string]: unknown;
            } | null;
            /** Steps */
            steps?: components["schemas"]["ProcessStepSchema"][] | null;
            /** Form */
            form?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * ProcessSearchParameters
         * @description Search parameters specifically for PROCESS entities.
         */
        ProcessSearchParameters: {
            /**
             * @description The action to perform.
             * @default select
             */
            action: components["schemas"]["ActionType"];
            /**
             * Entity Type
             * @description The type of entity to search.
             * @default PROCESS
             * @constant
             */
            entity_type: "PROCESS";
            /**
             * Filters
             * @description A list of structured filters to apply to the search.
             */
            filters?: components["schemas"]["PathFilter"][] | null;
            /**
             * Query
             * @description Unified search query - will be processed into vector_query and/or fuzzy_term
             */
            query?: string | null;
        };
        /**
         * ProcessSearchSchema
         * @description Schema for process search results
         */
        ProcessSearchSchema: {
            /**
             * Processid
             * Format: uuid
             */
            processId: string;
            /** Workflowname */
            workflowName: string;
            /**
             * Workflowid
             * Format: uuid
             */
            workflowId: string;
            /** Status */
            status: string;
            /** Istask */
            isTask: boolean;
            /** Createdby */
            createdBy?: string | null;
            /**
             * Startedat
             * Format: date-time
             */
            startedAt: string;
            /**
             * Lastmodifiedat
             * Format: date-time
             */
            lastModifiedAt: string;
            /** Laststep */
            lastStep?: string | null;
            /** Failedreason */
            failedReason?: string | null;
            /** Subscriptionids */
            subscriptionIds?: string[] | null;
        };
        /**
         * ProcessStatus
         * @enum {string}
         */
        ProcessStatus: "created" | "running" | "suspended" | "waiting" | "awaiting_callback" | "aborted" | "failed" | "api_unavailable" | "inconsistent_data" | "completed" | "resumed";
        /** ProcessStatusCounts */
        ProcessStatusCounts: {
            /** Process Counts */
            process_counts: {
                [key: string]: number;
            };
            /** Task Counts */
            task_counts: {
                [key: string]: number;
            };
        };
        /** ProcessStepSchema */
        ProcessStepSchema: {
            /** Step Id */
            step_id?: string | null;
            /** Name */
            name: string;
            /** Status */
            status: string;
            /** Created By */
            created_by?: string | null;
            /** Executed */
            executed?: string | null;
            /** Commit Hash */
            commit_hash?: string | null;
            /** State */
            state?: {
                [key: string]: unknown;
            } | null;
            /** State Delta */
            state_delta?: {
                [key: string]: unknown;
            } | null;
        };
        /** ProductBaseSchema */
        ProductBaseSchema: {
            /** Product Id */
            product_id?: string | null;
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Product Type */
            product_type: string;
            status: components["schemas"]["ProductLifecycle"];
            /** Tag */
            tag: string;
            /** Created At */
            created_at?: string | null;
            /** End Date */
            end_date?: string | null;
        };
        /** ProductBlockSchema */
        ProductBlockSchema: {
            /**
             * Product Block Id
             * Format: uuid
             */
            product_block_id: string;
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Tag */
            tag?: string | null;
            status: components["schemas"]["ProductLifecycle"];
            /** Resource Types */
            resource_types?: components["schemas"]["ResourceTypeSchema"][] | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** End Date */
            end_date?: string | null;
        };
        /**
         * ProductLifecycle
         * @enum {string}
         */
        ProductLifecycle: "active" | "pre production" | "phase out" | "end of life";
        /** ProductSchema */
        ProductSchema: {
            /**
             * Product Id
             * Format: uuid
             */
            product_id: string;
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Product Type */
            product_type: string;
            status: components["schemas"]["ProductLifecycle"];
            /** Tag */
            tag: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** End Date */
            end_date?: string | null;
            /** Product Blocks */
            product_blocks: components["schemas"]["ProductBlockSchema"][];
            /** Fixed Inputs */
            fixed_inputs: components["schemas"]["FixedInputSchema"][];
            /** Workflows */
            workflows: components["schemas"]["WorkflowSchema"][];
        };
        /**
         * SearchProducts
         * @description Searches for products based on specific criteria.
         */
        ProductSearchParameters: {
            /**
             * @description The action to perform.
             * @default select
             */
            action: components["schemas"]["ActionType"];
            /**
             * Entity Type
             * @description The type of entity to search.
             * @default PRODUCT
             * @constant
             */
            entity_type: "PRODUCT";
            /**
             * Filters
             * @description A list of structured filters to apply to the search.
             */
            filters?: components["schemas"]["PathFilter"][] | null;
            /**
             * Query
             * @description Unified search query - will be processed into vector_query and/or fuzzy_term
             */
            query?: string | null;
        };
        /**
         * ProductSearchSchema
         * @description Schema for product search results
         */
        ProductSearchSchema: {
            /**
             * Productid
             * Format: uuid
             */
            productId: string;
            /** Name */
            name: string;
            /** Producttype */
            productType: string;
            /** Tag */
            tag?: string | null;
            /** Description */
            description?: string | null;
            /** Status */
            status?: string | null;
            /** Createdat */
            createdAt?: string | null;
        };
        /** ResourceTypeSchema */
        ResourceTypeSchema: {
            /** Resource Type */
            resource_type: string;
            /** Description */
            description?: string | null;
            /**
             * Resource Type Id
             * Format: uuid
             */
            resource_type_id: string;
        };
        /** StepSchema */
        StepSchema: {
            /** Name */
            name: string;
        };
        /** StrEqFilter */
        StrEqFilter: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            op: "eq";
            /** Value */
            value: string;
        };
        /** StrNeFilter */
        StrNeFilter: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            op: "ne";
            /** Value */
            value: string;
        };
        /** SubscriptionDescriptionBaseSchema */
        SubscriptionDescriptionBaseSchema: {
            /** Description */
            description: string;
            /** Customer Id */
            customer_id: string;
            /**
             * Subscription Id
             * Format: uuid
             */
            subscription_id: string;
        };
        /** SubscriptionDescriptionSchema */
        SubscriptionDescriptionSchema: {
            /** Description */
            description: string;
            /** Customer Id */
            customer_id: string;
            /**
             * Subscription Id
             * Format: uuid
             */
            subscription_id: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Created At */
            created_at?: string | null;
            /** Version */
            version: number;
        };
        /** SubscriptionDomainModelSchema */
        SubscriptionDomainModelSchema: {
            /**
             * Subscription Id
             * Format: uuid
             */
            subscription_id: string;
            /** Start Date */
            start_date?: string | null;
            /** Description */
            description: string;
            status: components["schemas"]["SubscriptionLifecycle"];
            /** Product Id */
            product_id?: string | null;
            /** Customer Id */
            customer_id: string;
            /** Insync */
            insync: boolean;
            /** Note */
            note?: string | null;
            /** Name */
            name?: string | null;
            /** End Date */
            end_date?: string | null;
            product: components["schemas"]["ProductBaseSchema"];
            /**
             * Customer Descriptions
             * @default []
             */
            customer_descriptions: (components["schemas"]["SubscriptionDescriptionSchema"] | null)[];
            /** Tag */
            tag?: string | null;
            /** Version */
            version: number;
        } & {
            [key: string]: unknown;
        };
        /**
         * SubscriptionLifecycle
         * @enum {string}
         */
        SubscriptionLifecycle: "initial" | "active" | "migrating" | "disabled" | "terminated" | "provisioning";
        /** SubscriptionSchema */
        SubscriptionSchema: {
            /**
             * Subscription Id
             * Format: uuid
             */
            subscription_id: string;
            /** Start Date */
            start_date?: string | null;
            /** Description */
            description: string;
            status: components["schemas"]["SubscriptionLifecycle"];
            /** Product Id */
            product_id?: string | null;
            /** Customer Id */
            customer_id: string;
            /** Insync */
            insync: boolean;
            /** Note */
            note?: string | null;
            /** Name */
            name?: string | null;
            /** End Date */
            end_date?: string | null;
            product?: components["schemas"]["ProductBaseSchema"] | null;
            /** Customer Descriptions */
            customer_descriptions?: components["schemas"]["SubscriptionDescriptionSchema"][] | null;
            /** Tag */
            tag?: string | null;
            /** Version */
            version: number;
        };
        /**
         * SearchSubscriptions
         * @description Searches for subscriptions based on specific criteria.
         */
        SubscriptionSearchParameters: {
            /**
             * @description The action to perform.
             * @default select
             */
            action: components["schemas"]["ActionType"];
            /**
             * Entity Type
             * @description The type of entity to search.
             * @default SUBSCRIPTION
             * @constant
             */
            entity_type: "SUBSCRIPTION";
            /**
             * Filters
             * @description A list of structured filters to apply to the search.
             */
            filters?: components["schemas"]["PathFilter"][] | null;
            /**
             * Query
             * @description Unified search query - will be processed into vector_query and/or fuzzy_term
             */
            query?: string | null;
        };
        /** SubscriptionSearchResult */
        SubscriptionSearchResult: {
            /** Score */
            score: number;
            highlight?: components["schemas"]["Highlight"] | null;
            /** Subscription */
            subscription: {
                [key: string]: unknown;
            };
        };
        /** SubscriptionWithMetadata */
        SubscriptionWithMetadata: {
            /**
             * Subscription Id
             * Format: uuid
             */
            subscription_id: string;
            /** Start Date */
            start_date?: string | null;
            /** Description */
            description: string;
            status: components["schemas"]["SubscriptionLifecycle"];
            /** Product Id */
            product_id?: string | null;
            /** Customer Id */
            customer_id: string;
            /** Insync */
            insync: boolean;
            /** Note */
            note?: string | null;
            /** Name */
            name?: string | null;
            /** End Date */
            end_date?: string | null;
            product?: components["schemas"]["ProductBaseSchema"] | null;
            /** Customer Descriptions */
            customer_descriptions?: components["schemas"]["SubscriptionDescriptionSchema"][] | null;
            /** Tag */
            tag?: string | null;
            /** Version */
            version: number;
            /** Metadata */
            metadata: unknown | null;
        };
        /** SubscriptionWorkflowListsSchema */
        SubscriptionWorkflowListsSchema: {
            /** Reason */
            reason?: string | null;
            /** Locked Relations */
            locked_relations?: string[] | null;
            /** Create */
            create: components["schemas"]["WorkflowListItemSchema"][];
            /** Modify */
            modify: components["schemas"]["WorkflowListItemSchema"][];
            /** Terminate */
            terminate: components["schemas"]["WorkflowListItemSchema"][];
            /** System */
            system: components["schemas"]["WorkflowListItemSchema"][];
        };
        /**
         * Target
         * @enum {string}
         */
        Target: "CREATE" | "MODIFY" | "TERMINATE" | "SYSTEM";
        /** UpdateSubscriptionDescriptionSchema */
        UpdateSubscriptionDescriptionSchema: {
            /** Description */
            description: string;
            /** Customer Id */
            customer_id: string;
            /**
             * Subscription Id
             * Format: uuid
             */
            subscription_id: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Created At */
            created_at?: string | null;
            /** Version */
            version?: number | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** WorkerStatus */
        WorkerStatus: {
            /** Executor Type */
            executor_type: string;
            /**
             * Number Of Workers Online
             * @default 0
             */
            number_of_workers_online: number;
            /**
             * Number Of Queued Jobs
             * @default 0
             */
            number_of_queued_jobs: number;
            /**
             * Number Of Running Jobs
             * @default 0
             */
            number_of_running_jobs: number;
        };
        /** WorkflowListItemSchema */
        WorkflowListItemSchema: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Reason */
            reason?: string | null;
            /** Usable When */
            usable_when?: unknown[] | null;
            /** Status */
            status?: string | null;
            /** Action */
            action?: string | null;
            /** Locked Relations */
            locked_relations?: string[] | null;
            /** Unterminated Parents */
            unterminated_parents?: string[] | null;
            /** Unterminated In Use By Subscriptions */
            unterminated_in_use_by_subscriptions?: string[] | null;
        };
        /**
         * WorkflowProductSchema
         * @description Product associated with a workflow
         */
        WorkflowProductSchema: {
            /** Producttype */
            productType: string;
            /**
             * Productid
             * Format: uuid
             */
            productId: string;
            /** Name */
            name: string;
        };
        /** WorkflowSchema */
        WorkflowSchema: {
            /** Name */
            name: string;
            target: components["schemas"]["Target"];
            /** Description */
            description?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Workflow Id
             * Format: uuid
             */
            workflow_id: string;
            /** Steps */
            steps?: components["schemas"]["StepSchema"][] | null;
        };
        /**
         * WorkflowSearchParameters
         * @description Search parameters specifically for WORKFLOW entities.
         */
        WorkflowSearchParameters: {
            /**
             * @description The action to perform.
             * @default select
             */
            action: components["schemas"]["ActionType"];
            /**
             * Entity Type
             * @description The type of entity to search.
             * @default WORKFLOW
             * @constant
             */
            entity_type: "WORKFLOW";
            /**
             * Filters
             * @description A list of structured filters to apply to the search.
             */
            filters?: components["schemas"]["PathFilter"][] | null;
            /**
             * Query
             * @description Unified search query - will be processed into vector_query and/or fuzzy_term
             */
            query?: string | null;
        };
        /**
         * WorkflowSearchSchema
         * @description Schema for workflow search results
         */
        WorkflowSearchSchema: {
            /** Name */
            name: string;
            /** Products */
            products: components["schemas"]["WorkflowProductSchema"][];
            /** Description */
            description?: string | null;
            /** Createdat */
            createdAt?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    show_api_processes__process_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                process_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_api_processes__process_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                process_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    new_process_api_processes__workflow_key__post: {
        parameters: {
            query?: {
                reporter?: string | null;
            };
            header?: never;
            path: {
                workflow_key: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                }[] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessIdSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    resume_process_endpoint_api_processes__process_id__resume_put: {
        parameters: {
            query?: {
                reporter?: string | null;
            };
            header?: never;
            path: {
                process_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": unknown;
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    continue_awaiting_process_endpoint_api_processes__process_id__callback__token__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                process_id: string;
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    resume_all_processess_endpoint_api_processes_resume_all_put: {
        parameters: {
            query?: {
                reporter?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessResumeAllSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    abort_process_endpoint_api_processes__process_id__abort_put: {
        parameters: {
            query?: {
                reporter?: string | null;
            };
            header?: never;
            path: {
                process_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    status_counts_api_processes_status_counts_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessStatusCounts"];
                };
            };
        };
    };
    processes_filterable_api_processes__get: {
        parameters: {
            query?: {
                range?: string | null;
                sort?: string | null;
                filter?: string | null;
            };
            header?: {
                "if-none-match"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    fetch_api_products__get: {
        parameters: {
            query?: {
                tag?: string | null;
                product_type?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    product_by_id_api_products__product_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                product_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    subscription_details_by_id_with_domain_model_api_subscriptions_domain_model__subscription_id__get: {
        parameters: {
            query?: {
                filter_owner_relations?: boolean;
            };
            header?: never;
            path: {
                subscription_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionDomainModelSchema"] | null;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    subscriptions_search_api_subscriptions_search_get: {
        parameters: {
            query: {
                query: string;
                range?: string | null;
                sort?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionWithMetadata"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    subscription_workflows_by_id_api_subscriptions_workflows__subscription_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                subscription_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionWorkflowListsSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    subscription_set_in_sync_api_subscriptions__subscription_id__set_in_sync_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                subscription_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_subscription_customer_description_endpoint_api_subscription_customer_descriptions__put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSubscriptionDescriptionSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    save_subscription_customer_description_endpoint_api_subscription_customer_descriptions__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubscriptionDescriptionBaseSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_subscription_customer_descriptions_api_subscription_customer_descriptions___id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionDescriptionSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_subscription_customer_descriptions_api_subscription_customer_descriptions___id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_subscription_customer_description_by_customer_subscription_api_subscription_customer_descriptions_customer__customer_id__subscription__subscription_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer_id: string;
                subscription_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionDescriptionSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    log_error_api_user_error_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    log_user_info_api_user_log__user_name__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    clear_cache_api_settings_cache__name__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number | null;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_cache_names_api_settings_cache_names_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    reset_search_index_api_settings_search_index_reset_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_global_status_api_settings_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EngineSettingsSchema"];
                };
            };
        };
    };
    set_global_status_api_settings_status_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EngineSettingsBaseSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EngineSettingsSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_worker_status_api_settings_worker_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkerStatus"];
                };
            };
        };
    };
    get_health_api_health__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    search_subscriptions_api_search_subscriptions_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubscriptionSearchParameters"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectionSchema_SubscriptionSearchResult_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_workflows_api_search_workflows_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkflowSearchParameters"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectionSchema_WorkflowSearchSchema_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_products_api_search_products_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductSearchParameters"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectionSchema_ProductSearchSchema_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_processes_api_search_processes_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProcessSearchParameters"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectionSchema_ProcessSearchSchema_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    explore_hierarchy_paths_api_search_hierarchy_paths_get: {
        parameters: {
            query?: {
                /** @description Dot-separated path to explore from. If None, returns root paths */
                path?: string | null;
                /** @description Include example values for leaf nodes */
                include_values?: boolean;
                /** @description Maximum number of paths to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HierarchyResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_hierarchy_schema_api_search_hierarchy_schema_get: {
        parameters: {
            query?: {
                /** @description Filter by entity type */
                entity_type?: components["schemas"]["EntityKind"] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string[];
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    handle_http_get_api_graphql_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The GraphiQL integrated development environment. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not found if GraphiQL or query via GET are not enabled. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handle_http_post_api_graphql_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
